{"mappings":"AAAA,KAAK;AACL,4CAA4C;AAC5C,8BAA8B;AAC9B,oCAAoC;AACpC,qBAAqB;AACrB,qBAAqB;AACrB,iDAAiD;AACjD,mCAAmC;AACnC,iDAAiD;AACjD,sCAAsC;AACtC,sCAAsC;AACtC,gCAAgC;AAChC,gCAAgC;AAChC,MAAM,OAAO,IAAI,kBAAkB,4BAA4B;AAC/D,MAAM,YAAY,wCAAwC,yBAAyB;AACnF,MAAM,cAAc,0CAA0C,qCAAqC;AACnG,MAAM,YAAY,SAAS,cAAc,CAAC;AAC1C,MAAM,UAAU,SAAS,aAAa,CAAC;AACvC,MAAM,KAAK,SAAS,aAAa,CAAC;AAClC,oCAAoC;AACpC,yEAAyE;AACzE,MAAM,QAAQ;IACZ,aAAa;IACb,aAAa;AACf;AACA,UAAU,CAAC;IACT,KAAK,IAAI,CAAC,OAAO,KAAK;IACtB,KAAK,IAAI,IAAI,uBAAuB;IACpC,OAAO,KAAK,KAAK,CAAC,KAAK,QAAQ;AACjC;AAEA,eAAe;AACf,mDAAmD;AACnD,0DAA0D;AAC1D,cAAc;IACZ,MAAM,WAAW,QAAQ;IACzB,MAAM,WAAW,EAAE;IACnB,SAAS,IAAI,CAAC;IACd,oCAAoC;IACpC,IAAK,IAAI,IAAI,AAAC,CAAA,MAAM,WAAW,GAAG,CAAA,IAAK,IAAI,IAAI,MAAM,WAAW,GAAG,IAAI,IACrE,SAAS,IAAI,CAAC,CAAC;;wBAEK,EAAE,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;UAC/B,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,YAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC;;;IAG5D,CAAC;KACD,YAAY;IACd,SAAS,IAAI,CAAC;IACd,yBAAyB;IACzB,SAAS,IAAI,CAAC,CAAC;;sBAEK,EACd,MAAM,WAAW,GAAG,IAAI,MAAM,WAAW,GAAG,IAAI,EACjD;;sBAEe,EACd,MAAM,WAAW,GAAG,IAAI,MAAM,WAAW,GAAG,IAAI,EACjD;;EAEL,CAAC;IAED,UAAU,SAAS,GAAG,SAAS,IAAI,CAAC;AACtC;AAEA,sBAAsB;AACtB,aAAa;IACX,MAAM,KAAK,SAAS,IAAI,CAAC,SAAS,CAAC;IACnC,MAAM,WAAW,QAAQ,YAAY,OAAO,CAAC,OAAO;IACpD,UAAU,SAAS,GAAG,CAAC;QACjB,EAAE,SAAS,KAAK,CAAC;yBACA,EAAE,MAAM,WAAW,CAAC;EAC3C,CAAC;AACH;AACA,iCAAiC;AACjC,SAAS;IACP,MAAM,aAAa,SAAS,IAAI;IAChC,eAAe;IACf,kDAAkD;IAClD,IAAI,eAAe,IACjB,eAAe,QAAQ;SAGpB,IAAI,WAAW,OAAO,CAAC,cAAc,GAAG;QAC3C,4BAA4B;QAC5B,MAAM,WAAW,GAAG,OAAO,WAAW,SAAS,CAAC;QAChD;IACF,OAGE,cAAc,QAAQ;AAE1B;AAEA,UAAU;AACV,OAAO,gBAAgB,CAAC,cAAc;AACtC,UACA,qDAAqD;CACrD,iBAAiB","sources":["news_step7/index.js"],"sourcesContent":["//페이징\r\n//content_URL id값만 가져옴 + 페이지번호, 있었던 주소 확인 필요\r\n//@ioid JSON파일에서 id 가져와서 치환했음.\r\n//#3807789 -> substring(1) ->3807789\r\n//상세페이지 - 구분 - show +\r\n//목록페이지 - 구분 - page +\r\n//http://localhost:1234/#38099086 -> substring(1)\r\n//페이지 번호 계속 바뀜(상태 바뀜) -> 관리(쿠키, 세션)\r\n//http://localhost:1234/#/page/1  -> substring(7)\r\n//http://localhost:1234/#/page/2  -> 2\r\n//http://localhost:1234/#/page/3  -> 3\r\n//http://localhost:1234/#/show/1\r\n//http://localhost:1234/#/show/2\r\nconst ajax = new XMLHttpRequest(); //브라우저가 비동기처리를 위해 제공하는 내장객체임\r\nconst TITLE_URL = 'https://api.hnpwa.com/v0/news/1.json'; //목록, hashchange 일어나지 않음.\r\nconst CONTENT_URL = 'https://api.hnpwa.com/v0/item/@id.json'; //내용, hashchange 일어남, id값 가져옴.+ 페이지번호\r\nconst container = document.getElementById('root');\r\nconst content = document.createElement('div');\r\nconst ul = document.createElement('ul');\r\n//페이징 처리를 위해 필요한 상태값 관리 객체 선언(vo 느낌)\r\n//react 상태관리 시 만드는 이름임 -> detail창에서 원래 있던 곳로 이동하는 '돌아가기'를 사용하기 위해 상태관리 필요\r\nconst store = {\r\n  currentPage: 1,\r\n  totalRecord: 47,\r\n};\r\ngetData = (url) => {\r\n  ajax.open('GET', url, false);\r\n  ajax.send(); //서버측에 요청 보내고 응답 기다리는 중\r\n  return JSON.parse(ajax.response);\r\n};\r\n\r\n// 이전페이지, 다음페이지\r\n// 제목클릭시(a태그 발동) 상세화면으로 간다(라우팅->newsDetail) show 추가\r\n// #/show/2 -> substring(7) -> number(2) -> Integer.number\r\ngetNewsData = () => {\r\n  const newsData = getData(TITLE_URL);\r\n  const newsPage = [];\r\n  newsPage.push('<ul>');\r\n  //10개씩만 한 화면에 출력하기(0-9, 10-19,20-29)\r\n  for (let i = (store.currentPage - 1) * 10; i < store.currentPage * 10; i++) {\r\n    newsPage.push(`\r\n      <li>\r\n        <a href=\"#/show/${newsData[i].id}\">\r\n          ${newsData[i].title}, (😍${newsData[i].comments_count})\r\n        </a>\r\n      </li>\r\n    `);\r\n  } //end of for\r\n  newsPage.push('</ul>');\r\n  //이전, 다음페이지 버튼 넣기(삼항연산자로)\r\n  newsPage.push(`\r\n    <div>\r\n      <a href=\"#/page/${\r\n        store.currentPage > 1 ? store.currentPage - 1 : 1\r\n      }\">이전페이지</a>  \r\n      \r\n      <a href=\"#/page/${\r\n        store.currentPage < 3 ? store.currentPage + 1 : 3\r\n      }\">다음페이지</a>  \r\n    </div>\r\n  `);\r\n\r\n  container.innerHTML = newsPage.join('');\r\n};\r\n\r\n// 페이지로 이동하는 것 추가 page\r\nnewsDetail = () => {\r\n  const id = location.hash.substring(7);\r\n  const ncontent = getData(CONTENT_URL.replace('@id', id));\r\n  container.innerHTML = `\r\n    <h1>${ncontent.title}</h1>\r\n    <div><a href=\"#/page/${store.currentPage}\">목록으로</a></div>\r\n  `;\r\n};\r\n//router에도 show, page의 경우도 추가해야함.\r\nrouter = () => {\r\n  const routerPath = location.hash;\r\n  // 타입까지 같니? ===\r\n  //#만 있으면 빈값을 반환함 -> 글목록보기로 이동(최초 한 번만 사용됨->전처리 과정)\r\n  if (routerPath === '') {\r\n    getNewsData(); //글 목록보기\r\n  }\r\n  // #/page/이런 형태로 들어와 있으면 1이니까 0보다 큼 ->페이지에서 뉴스목록보기 \r\n  else if (routerPath.indexOf('#/page/') >= 0) {\r\n    //현재 페이지값 갖게 하기(전변의 느낌으로) ->\r\n    store.currentPage = Number(routerPath.substring(7));\r\n    getNewsData();\r\n  }\r\n  // routerPath에 '#/page/'이 아닌경우 -> #/show/의 경우, detail 함수를  확인 가능\r\n  else {\r\n    newsDetail(); //글 내용보기\r\n  }\r\n};\r\n\r\n//함수 호출 가능\r\nwindow.addEventListener('hashchange', router);\r\nrouter();\r\n// window.addEventListener('hashchange', newsDetail);\r\n// getNewsData();\r\n"],"names":[],"version":3,"file":"index.e4444e20.js.map","sourceRoot":"/__parcel_source_root/"}