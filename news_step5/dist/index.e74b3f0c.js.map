{"mappings":"AAAA,MAAM,OAAO,IAAI,kBAAkB,4BAA4B;AAC/D,MAAM,YAAY;AAClB,MAAM,cAAc;AACpB,MAAM,YAAY,SAAS,cAAc,CAAC;AAC1C,MAAM,UAAU,SAAS,aAAa,CAAC;AAEvC,mCAAmC;AACnC,gCAAgC;AAChC,UAAU,CAAC;IACT,KAAK,IAAI,CAAC,OAAO,KAAK;IACtB,KAAK,IAAI,IAAI,uBAAuB;IACpC,OAAO,KAAK,KAAK,CAAC,KAAK,QAAQ;AACjC;AAEA,MAAM,WAAW,QAAQ,YAAY,yCAAyC;AAC9E,QAAQ,GAAG,CAAC,WAAW,uCAAuC;AAC9D,MAAM,KAAK,SAAS,aAAa,CAAC,OAAO,kDAAkD;AAE3F,OAAO,gBAAgB,CAAC,cAAc;IACpC,MAAM,KAAK,SAAS,IAAI,CAAC,SAAS,CAAC;IACnC,MAAM,WAAW,QAAQ,YAAY,OAAO,CAAC,OAAO,KAAK;IACzD,MAAM,QAAQ,SAAS,aAAa,CAAC;IACrC,iCAAiC;IACjC,oCAAoC;IACpC,8BAA8B;IAC9B,uBAAuB;IACvB,UAAU,SAAS,GAAG,CAAC;QACjB,EAAE,SAAS,KAAK,CAAC;;EAEvB,CAAC;AACH;AAEA,+BAA+B;AAC/B,MAAM,WAAW,EAAE,EAAE,2BAA2B;AAChD,sDAAsD;AACtD,SAAS,IAAI,CAAC;AACd,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IACtB,SAAS,IAAI,CAAC,CAAC;;gBAED,EAAE,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;QACzB,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,YAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC;;;EAG5D,CAAC;CACD,YAAY;AACd,SAAS,IAAI,CAAC;AACd,+DAA+D;AAC/D,UAAU,SAAS,GAAG,SAAS,IAAI,CAAC,KAEpC,0BAA0B;CAC1B,wCAAwC;CACxC,gBAAgB;CAChB,qCAAqC","sources":["news_step5/index.js"],"sourcesContent":["const ajax = new XMLHttpRequest(); //브라우저가 비동기처리를 위해 제공하는 내장객체임\r\nconst TITLE_URL = 'https://api.hnpwa.com/v0/news/1.json';\r\nconst CONTENT_URL = 'https://api.hnpwa.com/v0/item/@id.json';\r\nconst container = document.getElementById('root');\r\nconst content = document.createElement('div');\r\n\r\n//@param url - title or content URL\r\n//@return    - Array(<-JSON을 변환)\r\ngetData = (url) => {\r\n  ajax.open('GET', url, false);\r\n  ajax.send(); //서버측에 요청 보내고 응답 기다리는 중\r\n  return JSON.parse(ajax.response);\r\n};\r\n\r\nconst newsList = getData(TITLE_URL); //6번에서 요청했을 때 서버측의 응답을 받아오는 속성이 response임\r\nconsole.log(newsList); //서버측에서 보낸 응답을 출력해 보기 -Array로 변환하여 출력해줌\r\nconst ul = document.createElement('ul'); //DOM  API가지고 태그를 만드니까 직관적이지 않다. DOM Tree그려지지 않아서.\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  const id = location.hash.substring(1);\r\n  const ncontent = getData(CONTENT_URL.replace('@id', id), false);\r\n  const title = document.createElement('h1');\r\n  // 원래는 눌렀을 때 아래에 추가되게 append 했었음.\r\n  // title.innerHTML = ncontent.title;\r\n  // content.appendChild(title);\r\n  // append가 아닌 덮어쓰기로 표시됨\r\n  container.innerHTML = `\r\n    <h1>${ncontent.title}</h1>\r\n    <div><a href=\"#\">목록으로</a></div>\r\n  `;\r\n});\r\n\r\n//배열선언하기 - 뉴스목록을 배열로 담아서 한번에 넣기\r\nconst newsPage = []; //빈 배열 선언(안에 ul, li 한번에 넣기)\r\n//배열더하기 Array.prototype.push (여는태그, 닫는태그 다 배열로 추가해야함!)\r\nnewsPage.push('<ul>');\r\nfor (let i = 0; i < 10; i++) {\r\n  newsPage.push(`\r\n    <li>\r\n      <a href=\"#${newsList[i].id}\">\r\n        ${newsList[i].title}, (😍${newsList[i].comments_count})\r\n      </a>\r\n    </li>\r\n  `);\r\n} //end of for\r\nnewsPage.push('</ul>');\r\n//배열의 값들을 합쳐서 만드는 함수 join() -> 디폴트는 콤마, but 구분자 역할하는 빈문자열로 입력??\r\ncontainer.innerHTML = newsPage.join('');\r\n\r\n// DOM API로 페이지를 그렸더니 직관적x\r\n// 이것을 개선하고자 문자열을 이용하여 태그를 이어붙여 코드양은 늘리되\r\n// 복잡도는 낮춰보고자 함.\r\n// createElement, appendChild 다 걷어낸다.\r\n"],"names":[],"version":3,"file":"index.e74b3f0c.js.map","sourceRoot":"/__parcel_source_root/"}